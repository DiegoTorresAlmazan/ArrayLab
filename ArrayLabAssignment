package edu.sdccd.cisc191;

/**
 * CISC191 2.3 Multidimensional Arrays - Junior
 * @author Diego Torres
 */

public class ArrayLab {
    /**
     * @param args command line parameters
     */
    public static void main(String[] args) {
        int[][] spreadsheet = new int[][] { {1,2,3},
                                            {4,5,6},
                                            {7,8,9} };
        System.out.println("Max: " + max(spreadsheet));
        System.out.println("Sum of row 0: " + rowSum(spreadsheet,0));
        System.out.println("Sum of col 0: " + columnSum(spreadsheet,0));
        int[] rowSums = allRowSums(spreadsheet);
        for(int row = 0; row < rowSums.length; row++) {
            System.out.println("Sum of row " + row + ": " + rowSums[row]);
        }

    }

    /**
     * @param a 2D array
     * @return the maximum value in the 2d parameter array a
     */
    public static int max(int[][] a) {
        int i,j,maxValue;
        maxValue = a[0][0];
        //The try statement allows you to define a block of code to be tested for errors while it is being executed.
        try {
            //Goes trough every element of Array (Rows & Columns)
            for (i = 0; i < a.length; i++) {
                for (j = 0; j < a.length; j++)
            //Sets elements of each Row & Column to find max value
                    if (a[i][j] > maxValue) {
                        maxValue = a[i][j];

                    }

            }
        }
        //The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.
        catch(Exception e){

        }


        return maxValue;
    }

    /**
     * @param a 2D array
     * @param x row index
     * @return the sum of the elements in Row x of a
     */
    public static int rowSum(int[][] a, int x) {
        int i,sumOfRow;
        sumOfRow = 0;
            //scans length of array
            for (i = 0; i < a[x].length; i++) {
                sumOfRow += a[x][i];
            }


        return sumOfRow;
    }

    /**
     * @param a 2D array
     * @param x column index
     * @return the sum of the elements in Column x of a (careful with rows of different lengths!)
     */
    public static int columnSum(int[][] a, int x) {
        int i,j,sumOfColumn;
        sumOfColumn = 0;

        for(i=0; i < a.length; i++){
            for(j=x; j < x+1; j++){
                try {
                    sumOfColumn += a[i][j];
                }catch (Exception e){

                }
            }
        }

        return sumOfColumn;
    }

    /**
     * @param a 2D array
     * @return calculates the row sum for every row and returns each of the values in an array. Index i of the return array contains the sum of elements in row i.
     */
    public static int[] allRowSums(int[][] a) {
        int i,j,totalSum;
        int [] newArray = new int[a.length];

        for(i=0; i < a.length; i++){
            totalSum = 0;

            for(j=0; j < a[i].length; j++){
                totalSum += a[i][j];

            }
            newArray[i] = totalSum;
        }

        return newArray;
    }
}
